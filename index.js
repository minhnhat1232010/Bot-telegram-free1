const TelegramBot = require('node-telegram-bot-api');
const fetch = require('node-fetch');
const express = require('express');
const app = express();

// --- C·∫•u h√¨nh Bot v√† Webhook ---
const BOT_TOKEN = '8280612700:AAFiIRFMfRo2KjE9ukQ-qkkVnDIxTtRqPes'; // <-- THAY TH·∫æ B·∫∞NG TOKEN BOT C·ª¶A B·∫†N
const PORT = process.env.PORT || 3000;

// URL c·ªßa ·ª©ng d·ª•ng Render c·ªßa b·∫°n.
// SAU KHI TRI·ªÇN KHAI L√äN RENDER, B·∫†N S·∫º C√ì URL N√ÄY (VD: https://ten-ung-dung-cua-ban.onrender.com)
// H√ÉY C·∫¨P NH·∫¨T L·∫†I BI·∫æN N√ÄY V·ªöI URL TH·ª∞C T·∫æ C·ª¶A B·∫†N!
const WEBHOOK_URL = process.env.WEBHOOK_URL || 'https://sunwin-bot-taixiu11.onrender.com'; // <-- THAY TH·∫æ B·∫∞NG URL TH·ª∞C C·ª¶A RENDER APP C·ª¶A B·∫†N

const bot = new TelegramBot(BOT_TOKEN); // Kh√¥ng d√πng polling ·ªü ƒë√¢y

let latestPhien = null;
let subscribers = new Set(); // D√πng Set ƒë·ªÉ qu·∫£n l√Ω subscribers hi·ªáu qu·∫£ h∆°n

// Middleware ƒë·ªÉ Express c√≥ th·ªÉ ƒë·ªçc JSON body t·ª´ Telegram
app.use(express.json());

// --- Thi·∫øt l·∫≠p Webhook ---
// ƒê·∫∑t webhook khi bot kh·ªüi ƒë·ªông
bot.setWebHook(`${WEBHOOK_URL}/bot${BOT_TOKEN}`)
  .then(() => console.log('‚úÖ Webhook ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p th√†nh c√¥ng!'))
  .catch(e => console.error('‚ùå L·ªói khi thi·∫øt l·∫≠p Webhook:', e));

// X·ª≠ l√Ω c√°c update t·ª´ Telegram
app.post(`/bot${BOT_TOKEN}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200); // Lu√¥n tr·∫£ v·ªÅ 200 OK cho Telegram
});

// --- H√†m l·∫•y d·ªØ li·ªáu API ---
async function fetchData() {
  try {
    const res = await fetch('https://saobody-lopq.onrender.com/api/taixiu/sunwin');
    if (!res.ok) { // Ki·ªÉm tra tr·∫°ng th√°i HTTP response
      throw new Error(`HTTP error! status: ${res.status}`);
    }
    const data = await res.json();
    return data;
  } catch (e) {
    console.error('‚ùå API Error:', e);
    return null;
  }
}

// --- H√†m ƒë·ªãnh d·∫°ng tin nh·∫Øn ---
function formatMessage(data) {
  const {
    phien,
    xuc_xac_1,
    xuc_xac_2,
    xuc_xac_3,
    tong,
    ket_qua,
    du_doan,
    ty_le_thanh_cong,
    pattern
  } = data;

  const nextPhien = phien + 1;
  const time = new Date().toLocaleTimeString('vi-VN', { hour12: false });

  return `
üéÆ *SUNWIN VIP - PH√ÇN T√çCH CHU·∫®N X√ÅC* üéÆ
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üÜî *Phi√™n:* \`${phien}\`
üé≤ *X√∫c x·∫Øc:* [\`${xuc_xac_1}\` - \`${xuc_xac_2}\` - \`${xuc_xac_3}\`]
üßÆ *T·ªïng ƒëi·ªÉm:* \`${tong}\` | *K·∫øt qu·∫£:* *${ket_qua}*
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üîÆ *D·ª± ƒëo√°n phi√™n ${nextPhien}:* *${du_doan}*
üìä *ƒê·ªô tin c·∫≠y:* üî• (\`${ty_le_thanh_cong}%\`)
üéØ *Khuy·∫øn ngh·ªã:* ƒê·∫∑t c∆∞·ª£c *${du_doan}*

üß© *Pattern:* ${pattern ? `\`${pattern}\`` : 'Kh√¥ng ph√°t hi·ªán m·∫´u c·ª• th·ªÉ'}
‚è±Ô∏è *Th·ªùi gian:* \`${time}\`
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üë• _H·ªá th·ªëng ph√¢n t√≠ch Sunwin AI_ üë•
üíé _Uy t√≠n - Ch√≠nh x√°c - Hi·ªáu qu·∫£_ üíé
`.trim();
}

// --- H√†m ki·ªÉm tra d·ªØ li·ªáu m·ªõi v√† g·ª≠i cho ng∆∞·ªùi ƒëƒÉng k√Ω ---
async function checkNewData() {
  const data = await fetchData();
  if (!data) {
    console.log('Kh√¥ng c√≥ d·ªØ li·ªáu m·ªõi ho·∫∑c l·ªói API.');
    return;
  }

  // N·∫øu c√≥ phi√™n m·ªõi
  if (data.phien !== latestPhien) {
    console.log(`Ph√°t hi·ªán phi√™n m·ªõi: ${data.phien}`);
    latestPhien = data.phien; // C·∫≠p nh·∫≠t phi√™n m·ªõi nh·∫•t

    if (subscribers.size > 0) { // Ch·ªâ g·ª≠i n·∫øu c√≥ ng∆∞·ªùi ƒëƒÉng k√Ω
      for (const chatId of subscribers) {
        try {
          await bot.sendMessage(chatId, formatMessage(data), { parse_mode: 'Markdown' });
          console.log(`ƒê√£ g·ª≠i tin nh·∫Øn cho chat ID: ${chatId}`);
        } catch (error) {
          console.error(`‚ùå L·ªói g·ª≠i tin nh·∫Øn ƒë·∫øn ${chatId}:`, error.message);
          // C√≥ th·ªÉ th√™m logic ƒë·ªÉ h·ªßy ƒëƒÉng k√Ω n·∫øu ng∆∞·ªùi d√πng ch·∫∑n bot
          if (error.response && error.response.error_code === 403) {
            console.log(`Ng∆∞·ªùi d√πng ${chatId} ƒë√£ ch·∫∑n bot. H·ªßy ƒëƒÉng k√Ω.`);
            subscribers.delete(chatId);
          }
        }
      }
    } else {
      console.log('Ch∆∞a c√≥ ng∆∞·ªùi ƒëƒÉng k√Ω nh·∫≠n th√¥ng b√°o.');
    }
  } else {
    console.log(`Phi√™n ${data.phien} kh√¥ng ƒë·ªïi.`);
  }
}

// Ch·∫°y ki·ªÉm tra d·ªØ li·ªáu ban ƒë·∫ßu ngay l·∫≠p t·ª©c
checkNewData();
// Sau ƒë√≥ ch·∫°y ki·ªÉm tra d·ªØ li·ªáu ƒë·ªãnh k·ª≥ m·ªói 5 gi√¢y
setInterval(checkNewData, 5000);

// --- X·ª≠ l√Ω l·ªánh /start ---
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const welcomeMessage = `
üëã Ch√†o b·∫°n ƒë·∫øn v·ªõi SUNWIN AI!
ƒê·ªÉ nh·∫≠n t·ª± ƒë·ªông d·ªØ li·ªáu T√†i/X·ªâu v√† qu·∫£n l√Ω ƒëƒÉng k√Ω, h√£y s·ª≠ d·ª•ng c√°c n√∫t b√™n d∆∞·ªõi.
  `.trim();

  // Th√™m Inline Keyboard
  bot.sendMessage(chatId, welcomeMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚úÖ Nh·∫≠n d·ª± ƒëo√°n Sunwin', callback_data: 'subscribe_sunwin' }],
        [{ text: 'üö´ H·ªßy nh·∫≠n d·ª± ƒëo√°n', callback_data: 'unsubscribe_sunwin' }],
        [{ text: 'üìä Xem d·ª± ƒëo√°n hi·ªán t·∫°i', callback_data: 'get_current_prediction' }] // Th√™m n√∫t xem d·ª± ƒëo√°n t·ª©c th·ªùi
      ]
    }
  });
});

// --- X·ª≠ l√Ω Inline Keyboard callbacks ---
bot.on('callback_query', async (callbackQuery) => {
  const message = callbackQuery.message;
  const chatId = message.chat.id;
  const data = callbackQuery.data;

  switch (data) {
    case 'subscribe_sunwin':
      if (!subscribers.has(chatId)) {
        subscribers.add(chatId);
        await bot.sendMessage(chatId, `‚úÖ B·∫°n ƒë√£ ƒëƒÉng k√Ω nh·∫≠n d·ª± ƒëo√°n SUNWIN t·ª± ƒë·ªông!`);
      } else {
        await bot.sendMessage(chatId, `B·∫°n ƒë√£ ƒëƒÉng k√Ω r·ªìi!`);
      }
      break;
    case 'unsubscribe_sunwin':
      if (subscribers.has(chatId)) {
        subscribers.delete(chatId);
        await bot.sendMessage(chatId, `üö´ B·∫°n ƒë√£ h·ªßy nh·∫≠n d·ª± ƒëo√°n SUNWIN.`);
      } else {
        await bot.sendMessage(chatId, `B·∫°n ch∆∞a ƒëƒÉng k√Ω nh·∫≠n d·ª± ƒëo√°n.`);
      }
      break;
    case 'get_current_prediction':
      await bot.sendMessage(chatId, 'ƒêang l·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t...', { parse_mode: 'Markdown' });
      const currentData = await fetchData();
      if (currentData) {
        await bot.sendMessage(chatId, formatMessage(currentData), { parse_mode: 'Markdown' });
      } else {
        await bot.sendMessage(chatId, 'Hi·ªán t·∫°i kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau.');
      }
      break;
    default:
      await bot.sendMessage(chatId, 'H√†nh ƒë·ªông kh√¥ng x√°c ƒë·ªãnh.');
      break;
  }
  // Lu√¥n tr·∫£ l·ªùi callback query ƒë·ªÉ lo·∫°i b·ªè tr·∫°ng th√°i loading tr√™n n√∫t
  await bot.answerCallbackQuery(callbackQuery.id);
});

// --- Route ƒë∆°n gi·∫£n ƒë·ªÉ Render bi·∫øt ·ª©ng d·ª•ng ƒëang ch·∫°y ---
app.get('/', (req, res) => res.send('‚úÖ SUNWIN Bot ƒëang ch·∫°y v√† s·∫µn s√†ng nh·∫≠n webhook...'));

// --- Kh·ªüi ƒë·ªông Server ---
app.listen(PORT, () => console.log(`üåê Server is running on port ${PORT}`));

